{"version":3,"file":"static/js/833.aeed4fc7.chunk.js","mappings":"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","sources":["Chat/ChatPage.tsx"],"sourcesContent":["import React, {FC, useEffect, useRef, useState} from \"react\";\r\nimport {ChatPageType} from \"../api/chat-api\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sendMessage, startMessagesListening, stopMessagesListening} from \"../redux/chat-reducer\";\r\nimport {AnyAction} from \"redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {selectIsAuth} from \"../redux/auth-selectors\";\r\n\r\n\r\nconst ChatPage: FC = () => {\r\n    const isAuth = useSelector(selectIsAuth)\r\n\r\n    return <div>\r\n        {isAuth\r\n            ? <Chat/>\r\n            : <AddMessageForm isAuth={isAuth}/>\r\n        }\r\n    </div>\r\n}\r\n\r\nconst Chat: FC = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening() as unknown as AnyAction)\r\n        return () => {\r\n            dispatch(stopMessagesListening() as unknown as AnyAction)\r\n        }\r\n    }, [dispatch])\r\n\r\n\r\n    return <div>\r\n        {status === 'error' && <div>Some error occurred. Please refresh page</div>}\r\n        <>\r\n            <Messages/>\r\n            <AddMessageForm isAuth={true}/>\r\n        </>\r\n    </div>\r\n}\r\n\r\nconst Messages: FC = () => {\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n    const [isAutoScroll, setIsAutoScroll] = useState(false)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: \"smooth\"})\r\n        }\r\n    }, [messages])\r\n\r\n\r\n    return <div style={{height: '500px', overflowY: 'auto'}} onScroll={scrollHandler}>\r\n        {messages.map((m, index) => <Message key={index} message={m}/>)}\r\n        <div ref={messagesAnchorRef}></div>\r\n    </div>\r\n}\r\n\r\nconst Message: FC<{ message: ChatPageType }> = React.memo(({message}) => {\r\n    return <div>\r\n        <div style={{display: \"flex\", alignItems: \"center\"}}>\r\n            <img alt={'user photo'} src={message.photo}/><b style={{marginLeft: '10px'}}>{message.userName}</b>\r\n        </div>\r\n        {message.message}\r\n        <hr/>\r\n    </div>\r\n})\r\n\r\nconst AddMessageForm: FC<{ isAuth: boolean }> = ({isAuth}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [message, setMessage] = useState('')\r\n\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n\r\n    const sendMessageHandler = () => {\r\n        if (message) {\r\n            dispatch(sendMessage(message) as unknown as AnyAction)\r\n            setMessage('')\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <div>\r\n            <textarea onChange={e => setMessage(e.currentTarget.value)} value={message}></textarea>\r\n        </div>\r\n        <div>\r\n            <button disabled={status !== 'ready'} onClick={sendMessageHandler}>Send</button>\r\n        </div>\r\n        {isAuth\r\n            ? ''\r\n            : <h1><b>'Chat works only for login users!'</b></h1>\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default ChatPage"],"names":["Chat","dispatch","useDispatch","useEffect","startMessagesListening","stopMessagesListening","_jsxs","children","status","_jsx","_Fragment","Messages","AddMessageForm","isAuth","messagesAnchorRef","useRef","messages","useSelector","state","chat","_useState","useState","_useState2","_slicedToArray","isAutoScroll","setIsAutoScroll","_messagesAnchorRef$cu","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","ref","React","_ref","display","alignItems","alt","src","photo","marginLeft","userName","_ref2","_useState3","_useState4","setMessage","onChange","value","disabled","onClick","sendMessage","selectIsAuth"],"sourceRoot":""}