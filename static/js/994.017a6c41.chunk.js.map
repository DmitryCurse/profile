{"version":3,"file":"static/js/994.017a6c41.chunk.js","mappings":"uNAMIA,EAA6B,SAACC,GAAmB,MAAM,CACvDC,OAAQD,EAAME,KAAKD,OACtB,EAOM,SAASE,EAAsBC,GAYlC,OAFqCC,EAAAA,EAAAA,IAA6CN,EAA7CM,EARO,SAACC,GACzC,IAAKL,EAAwBK,EAAxBL,OAAWM,GAASC,EAAAA,EAAAA,GAAIF,EAAKG,GAClC,OAAKR,GAGES,EAAAA,EAAAA,KAACN,GAASO,EAAAA,EAAAA,GAAA,GAAKJ,KAHFG,EAAAA,EAAAA,KAACE,EAAAA,GAAQ,CAACC,GAAG,UAIrC,GAKJ,C,4FC3BA,G,QAAA,CAAgB,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,OAAS,wBAAwB,WAAa,4BAA4B,SAAW,4B,qECmBpN,EATkC,SAACP,GACjC,IAAIQ,EAAO,YAAcR,EAAMS,GAE/B,OAAOC,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,OAASC,SAAA,EAC9BT,EAAAA,EAAAA,KAAA,OAAKO,UAAWC,EAAAA,WAAcE,IAAKC,KACnCX,EAAAA,EAAAA,KAACY,EAAAA,GAAO,CAACL,UAAW,SAAAM,GAAO,OAAIA,EAAQC,SAAWN,EAAAA,OAAWA,EAAAA,MAAQ,EAAEL,GAAIC,EAAKK,SAAEb,EAAMmB,SAE5F,ECNA,EAJ+B,SAACnB,GAC5B,OAAOI,EAAAA,EAAAA,KAAA,OAAKO,UAAWC,EAAAA,OAASC,SAAEb,EAAMoB,SAC5C,E,6BCiCMC,GAAeC,EAAAA,EAAAA,GAAiB,KAmBhCC,GAAsBC,EAAAA,EAAAA,GAA8B,CAACC,KAAM,wBAArCD,EAb6D,SAACxB,GACtF,OACIU,EAAAA,EAAAA,MAAA,QAAMgB,SAAU1B,EAAM2B,aAAad,SAAA,EAC/BT,EAAAA,EAAAA,KAAA,OAAAS,UACKe,EAAAA,EAAAA,IAA0C,qBAAsB,iBAAkB,CAACC,EAAAA,EAAUR,GAAeS,EAAAA,GAAUlB,EAAAA,aAE3HR,EAAAA,EAAAA,KAAA,OAAAS,UACIT,EAAAA,EAAAA,KAAA,UAAQO,UAAWC,EAAAA,OAASC,SAAC,aAI7C,IAIA,EA5CkC,SAACb,GAC/B,IAAIN,EAAQM,EAAM+B,YAEdC,EAAkBtC,EAAMuC,QAAQC,KAAI,SAAAC,GAAC,OAAI/B,EAAAA,EAAAA,KAACgC,EAAU,CAAajB,KAAMgB,EAAEhB,KAAMV,GAAI0B,EAAE1B,IAA1B0B,EAAE1B,GAA6B,IAC1F4B,EAAmB3C,EAAM4C,SAASJ,KAAI,SAAAK,GAAC,OAAInC,EAAAA,EAAAA,KAACoC,EAAO,CAAYpB,QAASmB,EAAEnB,SAAjBmB,EAAE9B,GAAyB,IAMxF,OACIC,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,QAAUC,SAAA,EACtBT,EAAAA,EAAAA,KAAA,OAAKO,UAAWC,EAAAA,YAAcC,SACzBmB,KAELtB,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,SAAWC,SAAA,EACvBT,EAAAA,EAAAA,KAAA,OAAAS,SAAMwB,KACNjC,EAAAA,EAAAA,KAACmB,EAAmB,CAACG,SAXb,SAACe,GACjBzC,EAAM0C,YAAYD,EAAOE,eAC7B,SAaJ,E,oBCzBA,GAAeC,E,QAAAA,KAA6B7C,EAAAA,EAAAA,KAPtB,SAACL,GACnB,MAAO,CACHqC,YAAarC,EAAMqC,YAE3B,IAGmE1B,EAAAA,EAAAA,GAAA,GAAMwC,EAAAA,IAAWhD,EAAAA,EAApF,CAAsGiD,E","sources":["hoc/withAuthRedirect.tsx","webpack://react-app/./src/Сomponents/Dialogs/Dialogs.module.css?9baa","Сomponents/Dialogs/DialogItem/DialogItem.tsx","Сomponents/Dialogs/Message/Message.tsx","Сomponents/Dialogs/Dialogs.tsx","Сomponents/Dialogs/DialogsContainer.tsx"],"sourcesContent":["import {Navigate} from \"react-router-dom\";\r\nimport React, {FC} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n} as MapPropsType)\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nexport function withAuthRedirect<WCP>(Component: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: FC<MapPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Navigate to='/login'/>\r\n\r\n        // @ts-ignore\r\n        return <Component {...restProps as WCP} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, {}, WCP, AppStateType>(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__ZX6XS\",\"dialogsItem\":\"Dialogs_dialogsItem__-z+aW\",\"dialog\":\"Dialogs_dialog__ZJn+w\",\"active\":\"Dialogs_active__Ej4j8\",\"userAvatar\":\"Dialogs_userAvatar__DxRfc\",\"messages\":\"Dialogs_messages__NSW+E\"};","import React, {FC} from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './../Dialogs.module.css'\r\nimport userPhoto from '../../../assets/images/cat.png'\r\n\r\n\r\ntype PropsType = {\r\n  id: number\r\n  name: string\r\n}\r\n\r\nconst DialogItem: FC<PropsType> = (props) => {\r\n  let path = '/dialogs/' + props.id\r\n\r\n  return <div className={s.dialog}>\r\n    <img className={s.userAvatar} src={userPhoto}/>\r\n    <NavLink className={navData => navData.isActive ? s.active : s.dialog} to={path}>{props.name}</NavLink>\r\n  </div>\r\n}\r\n\r\nexport default DialogItem;","import React, {FC} from 'react';\r\nimport s from './../Dialogs.module.css'\r\n\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message: FC<PropsType> = (props) => {\r\n    return <div className={s.dialog}>{props.message}</div>\r\n}\r\n\r\nexport default Message;","import React, {FC} from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Textarea} from \"../commons/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/helpers/validators\";\r\nimport {InitialStateType} from \"../../redux/dialogs-reducer\";\r\n\r\n\r\ntype OwnPropsType = {\r\n    dialogsPage: InitialStateType\r\n    sendMessage: (messageText: string) => void\r\n}\r\n\r\nexport type NewMessageFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\n\r\nconst Dialogs: FC<OwnPropsType> = (props) => {\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem  key={d.id} name={d.name} id={d.id}/>);\r\n    let messagesElements = state.messages.map(m => <Message key={m.id} message={m.message}/>);\r\n\r\n    let addNewMessage = (values: NewMessageFormType) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\n\r\ntype NewMessageFormValuesTypeKeys = Extract<keyof NewMessageFormType, string>\r\ntype PropsType = {}\r\n\r\nconst AddMessageForm: FC<InjectedFormProps<NewMessageFormType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<NewMessageFormValuesTypeKeys>('Enter your message', 'newMessageBody', [required, maxLength100], Textarea, s.textarea)}\r\n            </div>\r\n            <div>\r\n                <button className={s.button}>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<NewMessageFormType>({form: \"dialogAddMessageForm\"})(AddMessageForm)\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {actions} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, {...actions}), withAuthRedirect)(Dialogs) ;"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","_objectWithoutProperties","_excluded","_jsx","_objectSpread","Navigate","to","path","id","_jsxs","className","s","children","src","userPhoto","NavLink","navData","isActive","name","message","maxLength100","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","createField","required","Textarea","dialogsPage","dialogsElements","dialogs","map","d","DialogItem","messagesElements","messages","m","Message","values","sendMessage","newMessageBody","compose","actions","Dialogs"],"sourceRoot":""}