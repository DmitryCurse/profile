{"version":3,"file":"static/js/779.c308c8f8.chunk.js","mappings":"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","sources":["hoc/withAuthRedirect.tsx","webpack://react-app/./src/Сomponents/Profile/ProfileInfo/ProfileInfo.module.css?6211","Сomponents/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","webpack://react-app/./src/Сomponents/Profile/ProfileInfo/ProfileInfoDataForm.module.css?113d","Сomponents/Profile/ProfileInfo/ProfileDataForm.tsx","Сomponents/Profile/ProfileInfo/ProfileInfo.tsx","webpack://react-app/./src/Сomponents/Profile/MyPosts/Post.module.css?1754","Сomponents/Profile/MyPosts/Post.tsx","Сomponents/Profile/MyPosts/MyPosts.tsx","Сomponents/Profile/MyPosts/MyPostsContainer.tsx","Сomponents/Profile/Profile.tsx","Сomponents/Profile/ProfileContainer.tsx","Сomponents/Profile/withRouter.js","webpack://react-app/./src/Сomponents/Dialogs/Dialogs.module.css?9baa"],"sourcesContent":["import {Navigate} from \"react-router-dom\";\r\nimport React, {FC} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n} as MapPropsType)\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nexport function withAuthRedirect<WCP>(Component: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: FC<MapPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Navigate to='/login'/>\r\n\r\n        // @ts-ignore\r\n        return <Component {...restProps as WCP} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, {}, WCP, AppStateType>(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"avatarItem\":\"ProfileInfo_avatarItem__7mSWZ\",\"aboutMe\":\"ProfileInfo_aboutMe__apHg6\",\"avatarDescription\":\"ProfileInfo_avatarDescription__br7XF\",\"changePhoto\":\"ProfileInfo_changePhoto__THW4k\",\"contacts\":\"ProfileInfo_contacts__zVQ1E\",\"paddings\":\"ProfileInfo_paddings__C8A4G\",\"block\":\"ProfileInfo_block__KeRjm\"};","import React, {ChangeEvent, FC, useEffect, useState} from 'react';\r\nimport s from \"./ProfileInfo.module.css\";\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: FC<PropsType> = (props) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <div onDoubleClick={activateEditMode}\r\n                         className={s.avatarDescription}>{props.status || \"No Status\"}</div>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input value={status} onChange={onStatusChange} onBlur={deactivateEditMode} autoFocus={true}\r\n                           className={s.input}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"flex\":\"ProfileInfoDataForm_flex__PfacA\",\"contacts\":\"ProfileInfoDataForm_contacts__5fO-f\",\"paddings\":\"ProfileInfoDataForm_paddings__rwcdu\",\"grid\":\"ProfileInfoDataForm_grid__-mibS\",\"contact\":\"ProfileInfoDataForm_contact__UlluA\",\"button\":\"ProfileInfoDataForm_button__XLIn7\"};","import s from \"./ProfileInfo.module.css\";\r\nimport React, {FC} from \"react\";\r\nimport {createField, GetStringKeysType, Input, Textarea} from \"../../commons/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport style from \"../../commons/FormsControls/FormsControls.module.css\";\r\nimport p from \"./ProfileInfoDataForm.module.css\"\r\nimport {ProfileType} from \"../../../types/types\";\r\nimport d from \"../../Dialogs/Dialogs.module.css\";\r\n\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\ntype ProfileTypeKeys = GetStringKeysType<ProfileType>\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className={p.info}>\r\n                <div>\r\n                    <button className={d.button}>Save</button>\r\n                </div>\r\n                {error && <div className={style.formSummaryError}>\r\n                    {error}\r\n                </div>}\r\n                <div className={p.flex}>\r\n                    <b className={p.paddings}>Full name: </b> {createField<ProfileTypeKeys>('Full name', 'fullName', [], Input)}\r\n                </div>\r\n                <div className={p.flex}>\r\n                    <b className={p.paddings}>About me: </b> {createField<ProfileTypeKeys>('About me', 'aboutMe', [], Textarea)}\r\n                </div>\r\n                <div>\r\n                    <div className={p.contact}><b>Contacts:</b></div> {Object.keys(profile.contacts).map(key => {\r\n                    return <div key={key} className={s.contacts}>\r\n                        <b className={p.grid}>{key}: {createField(key, 'contacts.' + key, [], Input)}</b>\r\n                    </div>\r\n                })}\r\n                </div>\r\n                <div className={p.flex}>\r\n                    <b className={p.paddings}>Looking for a job: </b> {createField<ProfileTypeKeys>('', 'lookingForAJob', [], Input, {type: 'checkbox'})}\r\n                </div>\r\n                <div className={p.flex}>\r\n                    <b className={p.paddings}>A job description: </b> {createField<ProfileTypeKeys>('A job description', 'lookingForAJobDescription', [], Textarea)}\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm","import React, {ChangeEvent, FC, useState} from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../commons/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\"\r\nimport ProfileDataFormReduxForm from \"./ProfileDataForm\";\r\nimport {ContactsType, ProfileType} from \"../../../types/types\";\r\nimport d from \"../../Dialogs/Dialogs.module.css\";\r\n\r\n\r\nexport type PropsProfileInfoType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n    savePhoto: (file: File) => void\r\n    isOwner: boolean\r\n}\r\n\r\nconst ProfileInfo: FC<PropsProfileInfoType> = (props) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        props.saveProfile(formData).then(() => {\r\n            setEditMode(false)\r\n        })\r\n    }\r\n\r\n    const mainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) { //e.target.files && e.target.files.length\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.avatarItem}>\r\n                <img src={props.profile.photos.large || userPhoto}/>\r\n                <div>\r\n                    <div><b>{props.profile.fullName}</b></div>\r\n                    <div><ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/></div>\r\n                </div>\r\n            </div>\r\n            <div className={s.changePhoto}>\r\n                {props.isOwner && <input onChange={mainPhotoSelected} type={\"file\"} name={\"choose photo\"}/>}\r\n            </div>\r\n\r\n            {editMode\r\n                ? <ProfileDataFormReduxForm initialValues={props.profile} profile={props.profile} onSubmit={onSubmit}/>\r\n                : <ProfileData profile={props.profile} isOwner={props.isOwner} goToEditMode={() => setEditMode(true)}/>}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\ntype PropsDataType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: FC<PropsDataType> = ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        <div className={s.info}>\r\n            {isOwner && <div>\r\n                <button className={d.button} onClick={goToEditMode}>edit</button>\r\n            </div>}\r\n            <div className={s.block}>\r\n                <div className={`${s.paddings} ${s.aboutMe}`}>\r\n                    <div><b>Looking for a job:</b></div>\r\n                    {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n                    {profile.lookingForAJob &&\r\n                        <div className={s.paddings}>\r\n                            <b>My professional skills:</b> {profile.lookingForAJobDescription}\r\n                        </div>}\r\n                </div>\r\n                <div className={`${s.paddings} ${s.aboutMe}`}>\r\n                    <div><b>About me:</b></div>\r\n                    {profile.aboutMe}\r\n                </div>\r\n                <div className={s.contacts}>\r\n                    <b>Contacts:</b>{\r\n                    Object\r\n                        .keys(profile.contacts)\r\n                        .map(key => {\r\n                            return <Contact key={key} contactTitle={key}\r\n                                            contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n                        })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype PropsContactType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact: FC<PropsContactType> = ({contactTitle, contactValue}) => {\r\n    return <div className={s.paddings + ' ' + s.contacts}><b>{contactTitle}: </b>{contactValue}</div>\r\n}\r\nexport default ProfileInfo;\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"imgPost\":\"Post_imgPost__4kmyp\",\"item\":\"Post_item__eGdMT\",\"likes\":\"Post_likes__NbSuu\",\"postItem\":\"Post_postItem__6eKJy\",\"posts\":\"Post_posts__06nig\",\"textarea\":\"Post_textarea__0Uydn\"};","import React, {FC} from \"react\";\r\nimport s from \"./Post.module.css\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\n\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: FC<PropsType> = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n        <img src={userPhoto} className={s.imgPost}/>\r\n      {props.message}\r\n      <div className={s.postItem}>\r\n        <img src=\"https://clipground.com/images/herz-orange-clipart-6.jpg\" className={s.img} />\r\n        <span className={s.likes}>{props.likesCount}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React, {FC} from 'react';\r\nimport Post from './Post';\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/helpers/validators\";\r\nimport {createField, GetStringKeysType, Textarea} from \"../../commons/FormsControls/FormsControls\";\r\nimport {LoginFormValuesType} from \"../../Login/LoginPage\";\r\nimport {PostType} from \"../../../types/types\";\r\nimport s from '../MyPosts/Post.module.css'\r\nimport d from '../../Dialogs/Dialogs.module.css'\r\n\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<PostType>\r\n}\r\nexport type MapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\nconst MyPosts: FC<MapPropsType & MapDispatchPropsType> = props => {\r\n    let postsElements = props.posts.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n    let onAddPost = (values: ProfileFormValuesType) => {\r\n        props.addPost(values.newPostText)\r\n        values.newPostText = ''\r\n    }\r\n    return (\r\n        <div>\r\n            <h3>My posts</h3>\r\n            <AddPostReduxForm onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype PropsType = {}\r\ntype ProfileFormValuesType = {\r\n    newPostText: string\r\n}\r\ntype ProfileFormValuesKeysType = GetStringKeysType<ProfileFormValuesType>\r\n\r\nconst ProfileForm: FC<InjectedFormProps<LoginFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<ProfileFormValuesKeysType>('Post message', 'newPostText', [required, maxLength100], Textarea, s.textarea,)}\r\n            </div>\r\n            <div>\r\n                <button className={d.button}>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n// @ts-ignore\r\nconst AddPostReduxForm = reduxForm<ProfileFormValuesType, PropsType>({form: 'profileAddPostForm'})(ProfileForm)\r\n\r\nexport default React.memo(MyPosts);","import React from 'react';\r\nimport MyPosts, {MapDispatchPropsType, MapPropsType} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {actions} from \"../../../redux/profile.reducer\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {posts: state.profilePage.posts}\r\n}\r\n\r\nlet MyPostsContainer = connect<MapPropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {addPost: actions.addPostActionCreator})(MyPosts)\r\nexport default MyPostsContainer;\r\n","import React, {FC} from \"react\";\r\nimport ProfileInfo, {PropsProfileInfoType} from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\n\r\nconst Profile: FC<PropsProfileInfoType> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                saveProfile={props.saveProfile}\r\n                savePhoto={props.savePhoto}\r\n                isOwner={props.isOwner}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUsersProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile.reducer\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {withRouter} from \"./withRouter\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {ProfileType} from \"../../types/types\";\r\n// @ts-ignore\r\nimport {RouteComponentProps} from 'react-router-dom'\r\n\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getUsersProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n    savePhoto: (file: File) => void\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.router.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.navigate('/login');\r\n            }\r\n        }\r\n\r\n        if(!userId) {\r\n            console.error(\"ID should exist in URI params or in state('authorizedUserId')\")\r\n        } else {\r\n            this.props.getUsersProfile(userId)\r\n            this.props.getStatus(userId)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.router.params.userId !== prevProps.router.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <Profile {...this.props}\r\n                        saveProfile={this.props.saveProfile}\r\n                        savePhoto={this.props.savePhoto}\r\n                        isOwner={!this.props.router.params.userId}\r\n                        updateStatus={this.props.updateStatus}\r\n                        profile={this.props.profile}\r\n                        status={this.props.status}/>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUsersProfile,\r\n        getStatus,\r\n        updateStatus,\r\n        savePhoto,\r\n        saveProfile\r\n    }), withRouter, withAuthRedirect)(ProfileContainer)\r\n\r\n","import React from \"react\";\r\nimport { useLocation, useNavigate, useParams} from \"react-router-dom\";\r\n\r\nexport const withRouter = (Component) => {\r\n    function ComponentWithRouterProp(props) {\r\n        let location = useLocation();\r\n        let navigate = useNavigate();\r\n        let params = useParams();\r\n        return (\r\n            <Component\r\n                {...props}\r\n                router={{ location, navigate, params }}\r\n            />\r\n        );\r\n    }\r\n    return ComponentWithRouterProp;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__ZX6XS\",\"dialogsItem\":\"Dialogs_dialogsItem__-z+aW\",\"dialog\":\"Dialogs_dialog__ZJn+w\",\"active\":\"Dialogs_active__Ej4j8\",\"userAvatar\":\"Dialogs_userAvatar__DxRfc\",\"messages\":\"Dialogs_messages__NSW+E\",\"textarea\":\"Dialogs_textarea__duARs\",\"button\":\"Dialogs_button__osVEB\"};"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","_objectWithoutProperties","_excluded","_jsx","_objectSpread","Navigate","to","_useState","useState","_useState2","_slicedToArray","editMode","setEditMode","_useState3","status","_useState4","setStatus","useEffect","_jsxs","children","onDoubleClick","className","s","value","onChange","e","currentTarget","onBlur","updateStatus","autoFocus","reduxForm","form","_ref","handleSubmit","profile","error","onSubmit","p","d","style","createField","Input","Textarea","Object","keys","contacts","map","key","type","ProfileData","isOwner","goToEditMode","onClick","concat","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","_ref2","Preloader","src","photos","large","userPhoto","fullName","ProfileStatusWithHooks","_e$target$files","target","files","length","savePhoto","name","ProfileDataFormReduxForm","initialValues","formData","saveProfile","then","message","likesCount","maxLength100","maxLengthCreator","MyPosts","postsElements","posts","Post","id","AddPostReduxForm","values","addPost","newPostText","required","React","profilePage","actions","ProfileInfo","MyPostsContainer","ProfileContainer","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","userId","this","router","params","authorizedUserId","navigate","getUsersProfile","getStatus","console","refreshProfile","prevProps","prevState","Profile","compose","location","useLocation","useNavigate","useParams"],"sourceRoot":""}