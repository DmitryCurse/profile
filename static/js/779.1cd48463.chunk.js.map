{"version":3,"file":"static/js/779.1cd48463.chunk.js","mappings":"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","sources":["hoc/withAuthRedirect.tsx","webpack://react-app/./src/Сomponents/Profile/MyPosts/Post.module.css?1754","Сomponents/Profile/MyPosts/Post.tsx","Сomponents/Profile/MyPosts/MyPosts.tsx","Сomponents/Profile/MyPosts/MyPostsContainer.tsx","webpack://react-app/./src/Сomponents/Profile/ProfileInfo/ProfileInfo.module.css?6211","Сomponents/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","webpack://react-app/./src/Сomponents/Profile/ProfileInfo/ProfileInfoDataForm.module.css?113d","Сomponents/Profile/ProfileInfo/ProfileDataForm.tsx","Сomponents/Profile/ProfileInfo/ProfileInfo.tsx","Сomponents/Profile/Profile.tsx","Сomponents/Profile/ProfileContainer.tsx","Сomponents/Profile/withRouter.js"],"sourcesContent":["import {Navigate} from \"react-router-dom\";\r\nimport React, {FC} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n} as MapPropsType)\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nexport function withAuthRedirect<WCP>(Component: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: FC<MapPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Navigate to='/login'/>\r\n\r\n        // @ts-ignore\r\n        return <Component {...restProps as WCP} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, {}, WCP, AppStateType>(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"imgPost\":\"Post_imgPost__4kmyp\",\"item\":\"Post_item__eGdMT\",\"likes\":\"Post_likes__NbSuu\",\"postItem\":\"Post_postItem__6eKJy\",\"posts\":\"Post_posts__06nig\"};","import React, {FC} from \"react\";\r\nimport s from \"./Post.module.css\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\n\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: FC<PropsType> = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n        <img src={userPhoto} className={s.imgPost}/>\r\n      {props.message}\r\n      <div className={s.postItem}>\r\n        <img src=\"https://clipground.com/images/herz-orange-clipart-6.jpg\" className={s.img} />\r\n        <span className={s.likes}>{props.likesCount}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React, {FC} from 'react';\r\nimport Post from './Post';\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/helpers/validators\";\r\nimport {createField, GetStringKeysType, Textarea} from \"../../commons/FormsControls/FormsControls\";\r\nimport {LoginFormValuesType} from \"../../Login/LoginPage\";\r\nimport {PostType} from \"../../../types/types\";\r\nimport s from '../MyPosts/Post.module.css'\r\n\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\nexport type MapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\nconst MyPosts: FC<MapPropsType & MapDispatchPropsType> = props => {\r\n\r\n    let postsElements = props.posts.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n    let onAddPost = (values: ProfileFormValuesType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n    return (\r\n        <div>\r\n            <h3>My posts</h3>\r\n            <AddPostReduxForm onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype PropsType = {\r\n}\r\n\r\ntype ProfileFormValuesType = {\r\n    newPostText: string\r\n}\r\n\r\ntype ProfileFormValuesKeysType = GetStringKeysType<ProfileFormValuesType>\r\n\r\nconst ProfileForm: FC<InjectedFormProps<LoginFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<ProfileFormValuesKeysType>('Post message', 'newPostText', [required, maxLength100], Textarea)}\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n// @ts-ignore\r\nconst AddPostReduxForm = reduxForm<ProfileFormValuesType, PropsType >({form: 'profileAddPostForm'})(ProfileForm)\r\n\r\nexport default React.memo(MyPosts);","import React from 'react';\r\nimport MyPosts, {MapDispatchPropsType, MapPropsType} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {actions} from \"../../../redux/profile.reducer\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\n\r\nlet MyPostsContainer = connect<MapPropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {addPost: actions.addPostActionCreator})(MyPosts)\r\n\r\nexport default MyPostsContainer;","// extracted by mini-css-extract-plugin\nexport default {\"avatarItem\":\"ProfileInfo_avatarItem__7mSWZ\",\"aboutMe\":\"ProfileInfo_aboutMe__apHg6\",\"avatarDescription\":\"ProfileInfo_avatarDescription__br7XF\",\"changePhoto\":\"ProfileInfo_changePhoto__THW4k\",\"contacts\":\"ProfileInfo_contacts__zVQ1E\",\"paddings\":\"ProfileInfo_paddings__C8A4G\",\"block\":\"ProfileInfo_block__KeRjm\"};","import React, {ChangeEvent, FC, useEffect, useState} from 'react';\r\nimport s from \"./ProfileInfo.module.css\";\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: FC<PropsType> = (props) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <div onDoubleClick={activateEditMode}\r\n                         className={s.avatarDescription}>{props.status || \"No Status\"}</div>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input value={status} onChange={onStatusChange} onBlur={deactivateEditMode} autoFocus={true}\r\n                           className={s.input}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"flex\":\"ProfileInfoDataForm_flex__PfacA\",\"contacts\":\"ProfileInfoDataForm_contacts__5fO-f\",\"paddings\":\"ProfileInfoDataForm_paddings__rwcdu\",\"grid\":\"ProfileInfoDataForm_grid__-mibS\",\"contact\":\"ProfileInfoDataForm_contact__UlluA\",\"button\":\"ProfileInfoDataForm_button__XLIn7\"};","import s from \"./ProfileInfo.module.css\";\r\nimport React, {FC} from \"react\";\r\nimport {createField, GetStringKeysType, Input, Textarea} from \"../../commons/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport style from \"../../commons/FormsControls/FormsControls.module.css\";\r\nimport p from \"./ProfileInfoDataForm.module.css\"\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\ntype ProfileTypeKeys = GetStringKeysType<ProfileType>\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className={p.info}>\r\n                <div>\r\n                    <button className={p.button}>Save</button>\r\n                </div>\r\n                {error && <div className={style.formSummaryError}>\r\n                    {error}\r\n                </div>}\r\n                <div className={p.flex}>\r\n                    <b className={p.paddings}>Full name: </b> {createField<ProfileTypeKeys>('Full name', 'fullName', [], Input)}\r\n                </div>\r\n                <div className={p.flex}>\r\n                    <b className={p.paddings}>About me: </b> {createField<ProfileTypeKeys>('About me', 'aboutMe', [], Textarea)}\r\n                </div>\r\n                <div>\r\n                    <div className={p.contact}><b>Contacts:</b></div> {Object.keys(profile.contacts).map(key => {\r\n                    return <div key={key} className={s.contacts}>\r\n                        <b className={p.grid}>{key}: {createField(key, 'contacts.' + key, [], Input)}</b>\r\n                    </div>\r\n                })}\r\n                </div>\r\n                <div className={p.flex}>\r\n                    <b className={p.paddings}>Looking for a job: </b> {createField<ProfileTypeKeys>('', 'lookingForAJob', [], Input, {type: 'checkbox'})}\r\n                </div>\r\n                <div className={p.flex}>\r\n                    <b className={p.paddings}>A job description: </b> {createField<ProfileTypeKeys>('A job description', 'lookingForAJobDescription', [], Textarea)}\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm","import React, {ChangeEvent, FC, useState} from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../commons/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\"\r\nimport ProfileDataFormReduxForm from \"./ProfileDataForm\";\r\nimport {ContactsType, ProfileType} from \"../../../types/types\";\r\n\r\n\r\nexport type PropsProfileInfoType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n    savePhoto: (file: File) => void\r\n    isOwner: boolean\r\n}\r\n\r\nconst ProfileInfo: FC<PropsProfileInfoType> = (props) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        props.saveProfile(formData).then(() => {\r\n            setEditMode(false)\r\n        })\r\n    }\r\n\r\n    const mainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) { //e.target.files && e.target.files.length\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.avatarItem}>\r\n                <img src={props.profile.photos.large || userPhoto}/>\r\n                <div>\r\n                    <div><b>{props.profile.fullName}</b></div>\r\n                    <div><ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/></div>\r\n                </div>\r\n            </div>\r\n            <div className={s.changePhoto}>\r\n                {props.isOwner && <input onChange={mainPhotoSelected} type={\"file\"} name={\"choose photo\"}/>}\r\n            </div>\r\n\r\n            {editMode\r\n                ? <ProfileDataFormReduxForm initialValues={props.profile} profile={props.profile} onSubmit={onSubmit}/>\r\n                : <ProfileData profile={props.profile} isOwner={props.isOwner} goToEditMode={() => setEditMode(true)}/>}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\ntype PropsDataType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: FC<PropsDataType> = ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        <div className={s.info}>\r\n            {isOwner && <div>\r\n                <button className={s.button} onClick={goToEditMode}>edit</button>\r\n            </div>}\r\n            <div className={s.block}>\r\n                <div className={`${s.paddings} ${s.aboutMe}`}>\r\n                    <div><b>Looking for a job:</b></div>\r\n                    {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n                    {profile.lookingForAJob &&\r\n                        <div className={s.paddings}>\r\n                            <b>My professional skills:</b> {profile.lookingForAJobDescription}\r\n                        </div>}\r\n                </div>\r\n                <div className={`${s.paddings} ${s.aboutMe}`}>\r\n                    <div><b>About me:</b></div>\r\n                    {profile.aboutMe}\r\n                </div>\r\n                <div className={s.contacts}>\r\n                    <b>Contacts:</b>{\r\n                    Object\r\n                    .keys(profile.contacts)\r\n                    .map(key => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n                })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype PropsContactType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact: FC<PropsContactType> = ({contactTitle, contactValue}) => {\r\n    return <div className={s.paddings + ' ' + s.contacts}><b>{contactTitle}: </b>{contactValue}</div>\r\n}\r\nexport default ProfileInfo;\r\n\r\n","import React, {FC} from \"react\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport ProfileInfo, {PropsProfileInfoType} from \"./ProfileInfo/ProfileInfo\";\r\n\r\n\r\nconst Profile: FC<PropsProfileInfoType> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                saveProfile={props.saveProfile}\r\n                savePhoto={props.savePhoto}\r\n                isOwner={props.isOwner}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUsersProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile.reducer\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {withRouter} from \"./withRouter\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {ProfileType} from \"../../types/types\";\r\n// @ts-ignore\r\nimport {RouteComponentProps} from 'react-router-dom'\r\n\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getUsersProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n    savePhoto: (file: File) => void\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.router.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.navigate('/login');\r\n            }\r\n        }\r\n\r\n        if(!userId) {\r\n            console.error(\"ID should exist in URI params or in state('authorizedUserId')\")\r\n        } else {\r\n            this.props.getUsersProfile(userId)\r\n            this.props.getStatus(userId)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.router.params.userId !== prevProps.router.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <Profile {...this.props}\r\n                        saveProfile={this.props.saveProfile}\r\n                        savePhoto={this.props.savePhoto}\r\n                        isOwner={!this.props.router.params.userId}\r\n                        updateStatus={this.props.updateStatus}\r\n                        profile={this.props.profile}\r\n                        status={this.props.status}/>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUsersProfile,\r\n        getStatus,\r\n        updateStatus,\r\n        savePhoto,\r\n        saveProfile\r\n    }), withRouter, withAuthRedirect)(ProfileContainer)\r\n\r\n","import React from \"react\";\r\nimport { useLocation, useNavigate, useParams} from \"react-router-dom\";\r\n\r\nexport const withRouter = (Component) => {\r\n    function ComponentWithRouterProp(props) {\r\n        let location = useLocation();\r\n        let navigate = useNavigate();\r\n        let params = useParams();\r\n        return (\r\n            <Component\r\n                {...props}\r\n                router={{ location, navigate, params }}\r\n            />\r\n        );\r\n    }\r\n    return ComponentWithRouterProp;\r\n}"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","_objectWithoutProperties","_excluded","_jsx","_objectSpread","Navigate","to","_jsxs","className","s","children","src","userPhoto","message","likesCount","maxLength100","maxLengthCreator","MyPosts","postsElements","posts","map","p","Post","id","AddPostReduxForm","onSubmit","values","addPost","newPostText","reduxForm","form","handleSubmit","createField","required","Textarea","React","profilePage","actions","_useState","useState","_useState2","_slicedToArray","editMode","setEditMode","_useState3","status","_useState4","setStatus","useEffect","onDoubleClick","value","onChange","e","currentTarget","onBlur","updateStatus","autoFocus","_ref","profile","error","style","Input","Object","keys","contacts","key","type","ProfileData","isOwner","goToEditMode","onClick","concat","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","_ref2","Preloader","photos","large","fullName","ProfileStatusWithHooks","_e$target$files","target","files","length","savePhoto","name","ProfileDataFormReduxForm","initialValues","formData","saveProfile","then","ProfileInfo","MyPostsContainer","ProfileContainer","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","userId","this","router","params","authorizedUserId","navigate","getUsersProfile","getStatus","console","refreshProfile","prevProps","prevState","Profile","compose","location","useLocation","useNavigate","useParams"],"sourceRoot":""}